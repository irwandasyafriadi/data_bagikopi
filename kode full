// ============== DEPENDENCIES (build.gradle - Module: app) ==============
/*
dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.6.0'
    implementation 'androidx.navigation:navigation-ui:2.6.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.6.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    
    // Glide for image loading
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
*/

// ============== ANDROID MANIFEST ==============
/*
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CoffeeShop"
        tools:targetApi="31">

        <activity
            android:name=".activities.SplashActivity"
            android:exported="true"
            android:theme="@style/Theme.CoffeeShop.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".activities.AuthActivity"
            android:exported="false"
            android:theme="@style/Theme.CoffeeShop.NoActionBar" />

        <activity
            android:name=".activities.MainActivity"
            android:exported="false" />

        <activity
            android:name=".activities.DetailMenuActivity"
            android:exported="false" />

        <activity
            android:name=".activities.CheckoutActivity"
            android:exported="false" />

        <receiver android:name=".utils.NotificationReceiver" />

    </application>
</manifest>
*/

// ============== 1. MODELS ==============

// User.java
package com.coffeshop.app.models;

public class User {
    private int id;
    private String name;
    private String email;
    private String password;
    private String createdAt;
    
    public User() {}
    
    public User(String name, String email, String password) {
        this.name = name;
        this.email = email;
        this.password = password;
    }
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }
}

// MenuItem.java
package com.coffeshop.app.models;

import java.util.List;

public class MenuItem {
    private int id;
    private String name;
    private String category;
    private String description;
    private String imageUrl;
    private List<MenuSize> sizes;
    
    public MenuItem() {}
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    
    public List<MenuSize> getSizes() { return sizes; }
    public void setSizes(List<MenuSize> sizes) { this.sizes = sizes; }
    
    public double getMinPrice() {
        if (sizes != null && !sizes.isEmpty()) {
            double minPrice = sizes.get(0).getPrice();
            for (MenuSize size : sizes) {
                if (size.getPrice() < minPrice) {
                    minPrice = size.getPrice();
                }
            }
            return minPrice;
        }
        return 0;
    }
}

// MenuSize.java
package com.coffeshop.app.models;

public class MenuSize {
    private String size;
    private double price;
    
    public MenuSize() {}
    
    public MenuSize(String size, double price) {
        this.size = size;
        this.price = price;
    }
    
    // Getters and Setters
    public String getSize() { return size; }
    public void setSize(String size) { this.size = size; }
    
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
}

// Order.java
package com.coffeshop.app.models;

import java.util.List;

public class Order {
    private int id;
    private int userId;
    private int tableNumber;
    private String paymentMethodName;
    private String paymentMethodType;
    private double totalAmount;
    private String status;
    private String createdAt;
    private List<OrderItem> orderItems;
    
    public Order() {}
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    
    public int getTableNumber() { return tableNumber; }
    public void setTableNumber(int tableNumber) { this.tableNumber = tableNumber; }
    
    public String getPaymentMethodName() { return paymentMethodName; }
    public void setPaymentMethodName(String paymentMethodName) { this.paymentMethodName = paymentMethodName; }
    
    public String getPaymentMethodType() { return paymentMethodType; }
    public void setPaymentMethodType(String paymentMethodType) { this.paymentMethodType = paymentMethodType; }
    
    public double getTotalAmount() { return totalAmount; }
    public void setTotalAmount(double totalAmount) { this.totalAmount = totalAmount; }
    
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    
    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }
    
    public List<OrderItem> getOrderItems() { return orderItems; }
    public void setOrderItems(List<OrderItem> orderItems) { this.orderItems = orderItems; }
}

// OrderItem.java
package com.coffeshop.app.models;

public class OrderItem {
    private int id;
    private int orderId;
    private int menuId;
    private String menuName;
    private String menuImage;
    private String size;
    private int quantity;
    private double price;
    private double subtotal;
    
    public OrderItem() {}
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public int getOrderId() { return orderId; }
    public void setOrderId(int orderId) { this.orderId = orderId; }
    
    public int getMenuId() { return menuId; }
    public void setMenuId(int menuId) { this.menuId = menuId; }
    
    public String getMenuName() { return menuName; }
    public void setMenuName(String menuName) { this.menuName = menuName; }
    
    public String getMenuImage() { return menuImage; }
    public void setMenuImage(String menuImage) { this.menuImage = menuImage; }
    
    public String getSize() { return size; }
    public void setSize(String size) { this.size = size; }
    
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    
    public double getSubtotal() { return subtotal; }
    public void setSubtotal(double subtotal) { this.subtotal = subtotal; }
}

// CartItem.java
package com.coffeshop.app.models;

public class CartItem {
    private int id;
    private int userId;
    private int menuId;
    private String menuName;
    private String menuImage;
    private String size;
    private int quantity;
    private double price;
    private double subtotal;
    
    public CartItem() {}
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    
    public int getMenuId() { return menuId; }
    public void setMenuId(int menuId) { this.menuId = menuId; }
    
    public String getMenuName() { return menuName; }
    public void setMenuName(String menuName) { this.menuName = menuName; }
    
    public String getMenuImage() { return menuImage; }
    public void setMenuImage(String menuImage) { this.menuImage = menuImage; }
    
    public String getSize() { return size; }
    public void setSize(String size) { this.size = size; }
    
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    
    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }
    
    public double getSubtotal() { return subtotal; }
    public void setSubtotal(double subtotal) { this.subtotal = subtotal; }
}

// PaymentMethod.java
package com.coffeshop.app.models;

public class PaymentMethod {
    private int id;
    private String name;
    private String type;
    private String iconUrl;
    
    public PaymentMethod() {}
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getType() { return type; }
    public void setType(String type) { this.type = type; }
    
    public String getIconUrl() { return iconUrl; }
    public void setIconUrl(String iconUrl) { this.iconUrl = iconUrl; }
}

// ============== 2. DATABASE ==============

// DatabaseContract.java
package com.coffeshop.app.database;

public final class DatabaseContract {
    private DatabaseContract() {}
    
    public static final String DATABASE_NAME = "coffeeShop.db";
    public static final int DATABASE_VERSION = 1;
    
    public static final class UserEntry {
        public static final String TABLE_NAME = "users";
        public static final String COLUMN_ID = "id";
        public static final String COLUMN_NAME = "name";
        public static final String COLUMN_EMAIL = "email";
        public static final String COLUMN_PASSWORD = "password";
        public static final String COLUMN_CREATED_AT = "created_at";
        
        public static final String CREATE_TABLE = 
            "CREATE TABLE " + TABLE_NAME + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_NAME + " TEXT NOT NULL, " +
            COLUMN_EMAIL + " TEXT UNIQUE NOT NULL, " +
            COLUMN_PASSWORD + " TEXT NOT NULL, " +
            COLUMN_CREATED_AT + " DATETIME DEFAULT CURRENT_TIMESTAMP)";
    }
    
    public static final class OrderEntry {
        public static final String TABLE_NAME = "orders";
        public static final String COLUMN_ID = "id";
        public static final String COLUMN_USER_ID = "user_id";
        public static final String COLUMN_TABLE_NUMBER = "table_number";
        public static final String COLUMN_PAYMENT_METHOD_NAME = "payment_method_name";
        public static final String COLUMN_PAYMENT_METHOD_TYPE = "payment_method_type";
        public static final String COLUMN_TOTAL_AMOUNT = "total_amount";
        public static final String COLUMN_STATUS = "status";
        public static final String COLUMN_CREATED_AT = "created_at";
        
        public static final String CREATE_TABLE = 
            "CREATE TABLE " + TABLE_NAME + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_USER_ID + " INTEGER NOT NULL, " +
            COLUMN_TABLE_NUMBER + " INTEGER NOT NULL, " +
            COLUMN_PAYMENT_METHOD_NAME + " TEXT NOT NULL, " +
            COLUMN_PAYMENT_METHOD_TYPE + " TEXT NOT NULL, " +
            COLUMN_TOTAL_AMOUNT + " REAL NOT NULL, " +
            COLUMN_STATUS + " TEXT DEFAULT 'preparing', " +
            COLUMN_CREATED_AT + " DATETIME DEFAULT CURRENT_TIMESTAMP)";
    }
    
    public static final class OrderItemEntry {
        public static final String TABLE_NAME = "order_items";
        public static final String COLUMN_ID = "id";
        public static final String COLUMN_ORDER_ID = "order_id";
        public static final String COLUMN_MENU_ID = "menu_id";
        public static final String COLUMN_MENU_NAME = "menu_name";
        public static final String COLUMN_MENU_IMAGE = "menu_image";
        public static final String COLUMN_SIZE = "size";
        public static final String COLUMN_QUANTITY = "quantity";
        public static final String COLUMN_PRICE = "price";
        public static final String COLUMN_SUBTOTAL = "subtotal";
        
        public static final String CREATE_TABLE = 
            "CREATE TABLE " + TABLE_NAME + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_ORDER_ID + " INTEGER NOT NULL, " +
            COLUMN_MENU_ID + " INTEGER NOT NULL, " +
            COLUMN_MENU_NAME + " TEXT NOT NULL, " +
            COLUMN_MENU_IMAGE + " TEXT NOT NULL, " +
            COLUMN_SIZE + " TEXT NOT NULL, " +
            COLUMN_QUANTITY + " INTEGER NOT NULL, " +
            COLUMN_PRICE + " REAL NOT NULL, " +
            COLUMN_SUBTOTAL + " REAL NOT NULL)";
    }
    
    public static final class CartEntry {
        public static final String TABLE_NAME = "cart";
        public static final String COLUMN_ID = "id";
        public static final String COLUMN_USER_ID = "user_id";
        public static final String COLUMN_MENU_ID = "menu_id";
        public static final String COLUMN_MENU_NAME = "menu_name";
        public static final String COLUMN_MENU_IMAGE = "menu_image";
        public static final String COLUMN_SIZE = "size";
        public static final String COLUMN_QUANTITY = "quantity";
        public static final String COLUMN_PRICE = "price";
        public static final String COLUMN_SUBTOTAL = "subtotal";
        
        public static final String CREATE_TABLE = 
            "CREATE TABLE " + TABLE_NAME + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_USER_ID + " INTEGER NOT NULL, " +
            COLUMN_MENU_ID + " INTEGER NOT NULL, " +
            COLUMN_MENU_NAME + " TEXT NOT NULL, " +
            COLUMN_MENU_IMAGE + " TEXT NOT NULL, " +
            COLUMN_SIZE + " TEXT NOT NULL, " +
            COLUMN_QUANTITY + " INTEGER NOT NULL, " +
            COLUMN_PRICE + " REAL NOT NULL, " +
            COLUMN_SUBTOTAL + " REAL NOT NULL)";
    }
}

// DatabaseHelper.java
package com.coffeshop.app.database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DatabaseHelper extends SQLiteOpenHelper {
    
    public DatabaseHelper(Context context) {
        super(context, DatabaseContract.DATABASE_NAME, null, DatabaseContract.DATABASE_VERSION);
    }
    
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(DatabaseContract.UserEntry.CREATE_TABLE);
        db.execSQL(DatabaseContract.OrderEntry.CREATE_TABLE);
        db.execSQL(DatabaseContract.OrderItemEntry.CREATE_TABLE);
        db.execSQL(DatabaseContract.CartEntry.CREATE_TABLE);
    }
    
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + DatabaseContract.UserEntry.TABLE_NAME);
        db.execSQL("DROP TABLE IF EXISTS " + DatabaseContract.OrderEntry.TABLE_NAME);
        db.execSQL("DROP TABLE IF EXISTS " + DatabaseContract.OrderItemEntry.TABLE_NAME);
        db.execSQL("DROP TABLE IF EXISTS " + DatabaseContract.CartEntry.TABLE_NAME);
        onCreate(db);
    }
}

// ============== 3. NETWORK ==============

// ApiClient.java
package com.coffeshop.app.network;

import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {
    private static final String BASE_URL = "https://raw.githubusercontent.com/";
    private static Retrofit retrofit = null;
    
    public static Retrofit getClient() {
        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }
        return retrofit;
    }
}

// ApiService.java
package com.coffeshop.app.network;

import com.coffeshop.app.models.MenuItem;
import com.coffeshop.app.models.PaymentMethod;
import java.util.List;
import retrofit2.Call;
import retrofit2.http.GET;

public interface ApiService {
    
    public static class MenuResponse {
        private List<MenuItem> menus;
        private List<String> categories;
        
        public List<MenuItem> getMenus() { return menus; }
        public void setMenus(List<MenuItem> menus) { this.menus = menus; }
        
        public List<String> getCategories() { return categories; }
        public void setCategories(List<String> categories) { this.categories = categories; }
    }
    
    public static class PaymentResponse {
        private List<PaymentMethod> payment_methods;
        
        public List<PaymentMethod> getPaymentMethods() { return payment_methods; }
        public void setPaymentMethods(List<PaymentMethod> payment_methods) { this.payment_methods = payment_methods; }
    }
    
    @GET("username/repository/main/menu.json")
    Call<MenuResponse> getMenus();
    
    @GET("username/repository/main/payment.json")
    Call<PaymentResponse> getPaymentMethods();
}

// ============== 4. UTILS ==============

// Constants.java
package com.coffeshop.app.utils;

public class Constants {
    public static final String PREF_NAME = "CoffeeShopPrefs";
    public static final String KEY_USER_ID = "user_id";
    public static final String KEY_USER_NAME = "user_name";
    public static final String KEY_USER_EMAIL = "user_email";
    public static final String KEY_IS_LOGGED_IN = "is_logged_in";
    
    public static final String ORDER_STATUS_PREPARING = "preparing";
    public static final String ORDER_STATUS_COMPLETE = "complete";
    
    public static final String EXTRA_MENU_ITEM = "menu_item";
    public static final String EXTRA_CART_ITEM = "cart_item";
    public static final String EXTRA_IS_EDIT_MODE = "is_edit_mode";
    
    public static final String ACTION_ORDER_CREATED = "com.coffeshop.app.ORDER_CREATED";
    public static final String ACTION_ORDER_COMPLETED = "com.coffeshop.app.ORDER_COMPLETED";
}

// ValidationUtils.java
package com.coffeshop.app.utils;

import java.util.regex.Pattern;

public class ValidationUtils {
    
    private static final String EMAIL_PATTERN = 
            "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    
    private static final Pattern pattern = Pattern.compile(EMAIL_PATTERN);
    
    public static boolean isValidEmail(String email) {
        return email != null && pattern.matcher(email).matches();
    }
    
    public static boolean isValidPassword(String password) {
        return password != null && password.length() >= 6;
    }
    
    public static boolean isValidName(String name) {
        return name != null && !name.trim().isEmpty();
    }
    
    public static boolean isValidTableNumber(String tableNumber) {
        try {
            int number = Integer.parseInt(tableNumber);
            return number > 0;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    public static String formatPrice(double price) {
        return String.format("Rp %.0f", price);
    }
    
    public static String formatDate(String dateTime) {
        // Simple date formatting - can be improved with SimpleDateFormat
        if (dateTime != null && dateTime.contains(" ")) {
            return dateTime.split(" ")[0];
        }
        return dateTime;
    }
}

// AppRepository.java
package com.coffeshop.app.utils;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.coffeshop.app.database.DatabaseContract;
import com.coffeshop.app.database.DatabaseHelper;
import com.coffeshop.app.models.CartItem;
import com.coffeshop.app.models.MenuItem;
import com.coffeshop.app.models.Order;
import com.coffeshop.app.models.OrderItem;
import com.coffeshop.app.models.PaymentMethod;
import com.coffeshop.app.models.User;
import com.coffeshop.app.network.ApiClient;
import com.coffeshop.app.network.ApiService;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AppRepository {
    private static final String TAG = "AppRepository";
    private DatabaseHelper dbHelper;
    private ApiService apiService;
    
    public AppRepository(Context context) {
        dbHelper = new DatabaseHelper(context);
        apiService = ApiClient.getClient().create(ApiService.class);
    }
    
    // ============== USER METHODS ==============
    
    public interface UserCallback {
        void onSuccess(User user);
        void onError(String error);
    }
    
    public interface LoginCallback {
        void onSuccess(User user);
        void onError(String error);
    }
    
    public void registerUser(String name, String email, String password, UserCallback callback) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        
        // Check if email already exists
        Cursor cursor = db.query(DatabaseContract.UserEntry.TABLE_NAME,
                null,
                DatabaseContract.UserEntry.COLUMN_EMAIL + "=?",
                new String[]{email},
                null, null, null);
        
        if (cursor.getCount() > 0) {
            cursor.close();
            callback.onError("Email sudah terdaftar");
            return;
        }
        cursor.close();
        
        // Insert new user
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.UserEntry.COLUMN_NAME, name);
        values.put(DatabaseContract.UserEntry.COLUMN_EMAIL, email);
        values.put(DatabaseContract.UserEntry.COLUMN_PASSWORD, password);
        
        long result = db.insert(DatabaseContract.UserEntry.TABLE_NAME, null, values);
        
        if (result != -1) {
            User user = new User(name, email, password);
            user.setId((int) result);
            callback.onSuccess(user);
        } else {
            callback.onError("Gagal mendaftar");
        }
    }
    
    public void loginUser(String email, String password, LoginCallback callback) {
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        
        Cursor cursor = db.query(DatabaseContract.UserEntry.TABLE_NAME,
                null,
                DatabaseContract.UserEntry.COLUMN_EMAIL + "=? AND " + 
                DatabaseContract.UserEntry.COLUMN_PASSWORD + "=?",
                new String[]{email, password},
                null, null, null);
        
        if (cursor.moveToFirst()) {
            User user = new User();
            user.setId(cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseContract.UserEntry.COLUMN_ID)));
            user.setName(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.UserEntry.COLUMN_NAME)));
            user.setEmail(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.UserEntry.COLUMN_EMAIL)));
            user.setPassword(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.UserEntry.COLUMN_PASSWORD)));
            user.setCreatedAt(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.UserEntry.COLUMN_CREATED_AT)));
            
            cursor.close();
            callback.onSuccess(user);
        } else {
            cursor.close();
            callback.onError("Email atau password salah");
        }
    }
    
    // ============== MENU METHODS ==============
    
    public interface MenuCallback {
        void onSuccess(List<MenuItem> menus, List<String> categories);
        void onError(String error);
    }
    
    public void getMenus(MenuCallback callback) {
        Call<ApiService.MenuResponse> call = apiService.getMenus();
        call.enqueue(new Callback<ApiService.MenuResponse>() {
            @Override
            public void onResponse(Call<ApiService.MenuResponse> call, Response<ApiService.MenuResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body().getMenus(), response.body().getCategories());
                } else {
                    callback.onError("Gagal memuat menu");
                }
            }
            
            @Override
            public void onFailure(Call<ApiService.MenuResponse> call, Throwable t) {
                Log.e(TAG, "Error loading menus", t);
                callback.onError("Gagal memuat menu: " + t.getMessage());
            }
        });
    }
    
    // ============== PAYMENT METHODS ==============
    
    public interface PaymentCallback {
        void onSuccess(List<PaymentMethod> paymentMethods);
        void onError(String error);
    }
    
    public void getPaymentMethods(PaymentCallback callback) {
        Call<ApiService.PaymentResponse> call = apiService.getPaymentMethods();
        call.enqueue(new Callback<ApiService.PaymentResponse>() {
            @Override
            public void onResponse(Call<ApiService.PaymentResponse> call, Response<ApiService.PaymentResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    callback.onSuccess(response.body().getPaymentMethods());
                } else {
                    callback.onError("Gagal memuat metode pembayaran");
                }
            }
            
            @Override
            public void onFailure(Call<ApiService.PaymentResponse> call, Throwable t) {
                Log.e(TAG, "Error loading payment methods", t);
                callback.onError("Gagal memuat metode pembayaran: " + t.getMessage());
            }
        });
    }
    
    // ============== CART METHODS ==============
    
